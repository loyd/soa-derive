var N = null;var searchIndex = {};
searchIndex["soa_derive_example"]={"doc":"This crate is an example for the [`soa_derive`] crate functionalities. All the code is generated by a single file:","items":[[3,"Particle","soa_derive_example","A basic Particle type",N,N],[12,"mass","","Mass of the particle",0,N],[12,"position","","Position of the particle",0,N],[12,"kind","","Kind of the particle",0,N],[12,"name","","Name of the particle",0,N],[3,"ParticleVec","","An analog to `Vec<Particle>` with Struct of Array (SoA) layout",N,N],[12,"mass","","A vector of `mass` from a `Particle`",1,N],[12,"position","","A vector of `position` from a `Particle`",1,N],[12,"kind","","A vector of `kind` from a `Particle`",1,N],[12,"name","","A vector of `name` from a `Particle`",1,N],[3,"ParticleRef","","A reference to a `Particle`  with struct of array layout.",N,N],[12,"mass","","A reference to a `mass` from a `ParticleVec`",2,N],[12,"position","","A reference to a `position` from a `ParticleVec`",2,N],[12,"kind","","A reference to a `kind` from a `ParticleVec`",2,N],[12,"name","","A reference to a `name` from a `ParticleVec`",2,N],[3,"ParticleRefMut","","A mutable reference to a `Particle`  with struct of array layout.",N,N],[12,"mass","","A mutable reference to a `mass` from a `ParticleVec`",3,N],[12,"position","","A mutable reference to a `position` from a `ParticleVec`",3,N],[12,"kind","","A mutable reference to a `kind` from a `ParticleVec`",3,N],[12,"name","","A mutable reference to a `name` from a `ParticleVec`",3,N],[3,"ParticlePtr","","An analog of a pointer to `Particle`  with struct of array layout.",N,N],[12,"mass","","A pointer to a `mass` from a `ParticleVec`",4,N],[12,"position","","A pointer to a `position` from a `ParticleVec`",4,N],[12,"kind","","A pointer to a `kind` from a `ParticleVec`",4,N],[12,"name","","A pointer to a `name` from a `ParticleVec`",4,N],[3,"ParticlePtrMut","","An analog of a mutable pointer to `Particle`  with struct of array layout.",N,N],[12,"mass","","A mutable pointer to a `mass` from a `ParticleVec`",5,N],[12,"position","","A mutable pointer to a `position` from a `ParticleVec`",5,N],[12,"kind","","A mutable pointer to a `kind` from a `ParticleVec`",5,N],[12,"name","","A mutable pointer to a `name` from a `ParticleVec`",5,N],[3,"ParticleSlice","","A slice of `Particle`  inside a `ParticleVec`  .",N,N],[12,"mass","","A slice of `mass` from a `ParticleVec`",6,N],[12,"position","","A slice of `position` from a `ParticleVec`",6,N],[12,"kind","","A slice of `kind` from a `ParticleVec`",6,N],[12,"name","","A slice of `name` from a `ParticleVec`",6,N],[3,"ParticleSliceMut","","A mutable slice of `Particle`  inside a `ParticleVec`  .",N,N],[12,"mass","","A mutable slice of `mass` from a `ParticleVec`",7,N],[12,"position","","A mutable slice of `position` from a `ParticleVec`",7,N],[12,"kind","","A mutable slice of `kind` from a `ParticleVec`",7,N],[12,"name","","A mutable slice of `name` from a `ParticleVec`",7,N],[11,"iter","","Get an iterator over the `ParticleRef`  in this vector",1,[[["self"]],["iter"]]],[11,"iter","","Get an iterator over the `ParticleRef`  in this slice.",6,[[["self"]],["iter"]]],[11,"iter_mut","","Get a mutable iterator over the `ParticleRefMut`  in this vector",1,[[["self"]],["itermut"]]],[11,"iter","","Get an iterator over the `ParticleRef`  in this vector",7,[[["self"]],["iter"]]],[11,"iter_mut","","Get a mutable iterator over the `ParticleRefMut`  in this vector",7,[[["self"]],["itermut"]]],[11,"new","","Similar to `Vec<Particle> ::new()`",1,[[],["particlevec"]]],[11,"with_capacity","","Similar to `Vec<Particle> ::with_capacity()`,  initializing all fields with the given `capacity`.",1,[[["usize"]],["particlevec"]]],[11,"capacity","","Similar to `Vec<Particle> ::capacity()`,  the capacity of all fields should be the same.",1,[[["self"]],["usize"]]],[11,"reserve","","Similar to `Vec<Particle> ::reserve()`,  reserving the same `additional` space for all fields.",1,[[["self"],["usize"]]]],[11,"reserve_exact","","Similar to `Vec<Particle> ::reserve_exact()`  reserving the same `additional` space for all fields.",1,[[["self"],["usize"]]]],[11,"shrink_to_fit","","Similar to `Vec<Particle> ::shrink_to_fit()`  shrinking all fields.",1,[[["self"]]]],[11,"truncate","","Similar to `Vec<Particle> ::truncate()`  truncating all fields.",1,[[["self"],["usize"]]]],[11,"push","","Similar to `Vec<Particle> ::push()`.",1,[[["self"],["particle"]]]],[11,"len","","Similar to `Vec<Particle> ::len()`,  all the fields should have the same length.",1,[[["self"]],["usize"]]],[11,"is_empty","","Similar to `Vec<Particle> ::is_empty()`,  all the fields should have the same length.",1,[[["self"]],["bool"]]],[11,"swap_remove","","Similar to `Vec<Particle> ::swap_remove()`.",1,[[["self"],["usize"]],["particle"]]],[11,"insert","","Similar to `Vec<Particle> ::insert()`.",1,[[["self"],["usize"],["particle"]]]],[11,"remove","","Similar to `Vec<Particle> ::remove()`.",1,[[["self"],["usize"]],["particle"]]],[11,"pop","","Similar to `Vec<Particle> ::pop()`.",1,[[["self"]],["option",["particle"]]]],[11,"append","","Similar to `Vec<Particle> ::append()`.",1,[[["self"],["particlevec"]]]],[11,"clear","","Similar to `Vec<Particle> ::clear()`.",1,[[["self"]]]],[11,"split_off","","Similar to `Vec<Particle> ::split_off()`.",1,[[["self"],["usize"]],["particlevec"]]],[11,"as_slice","","Similar to `Vec<Particle> ::as_slice()`.",1,[[["self"]],["particleslice"]]],[11,"as_mut_slice","","Similar to `Vec<Particle> ::as_mut_slice()`.",1,[[["self"]],["particleslicemut"]]],[11,"slice","","Create a slice of this vector matching the given `range`. This is analogous to `Index<Range<usize>>`.",1,[[["self"],["range",["usize"]]],["particleslice"]]],[11,"slice_mut","","Create a mutable slice of this vector matching the given `range`. This is analogous to `IndexMut<Range<usize>>`.",1,[[["self"],["range",["usize"]]],["particleslicemut"]]],[11,"retain","","Similar to `Vec<Particle> ::retain()`.",1,[[["self"],["f"]]]],[11,"as_ptr","","Similar to `Vec<Particle> ::as_ptr()`.",1,[[["self"]],["particleptr"]]],[11,"as_mut_ptr","","Similar to `Vec<Particle> ::as_mut_ptr()`.",1,[[["self"]],["particleptrmut"]]],[11,"from_raw_parts","","Similar to `Vec<Particle> ::from_raw_parts()`.",1,[[["particleptrmut"],["usize"],["usize"]],["particlevec"]]],[11,"as_ref","","Create a `ParticleRef`  from a borrowed `Particle`  .",0,[[["self"]],["particleref"]]],[11,"as_mut","","Create a `ParticleRefMut`  from a mutably borrowed `Particle`  .",0,[[["self"]],["particlerefmut"]]],[11,"as_mut_ptr","","Convert a `ParticlePtr`  to a `ParticlePtrMut`  ; i.e. do a `*const T as *mut T` transformation.",4,[[["self"]],["particleptrmut"]]],[11,"is_null","","Similar to `*const T::is_null()`.",4,[[["self"]],["bool"]]],[11,"as_ref","","Similar to `*const T::as_ref()`, with the same safety caveats.",4,[[["self"]],["option",["particleref"]]]],[11,"offset","","Similar to `*const T::offset()`, with the same safety caveats.",4,[[["self"],["isize"]],["particleptr"]]],[11,"wrapping_offset","","Similar to `*const T::offset()`.",4,[[["self"],["isize"]],["particleptr"]]],[11,"add","","Similar to `*const T::add()`, with the same safety caveats.",4,[[["self"],["usize"]],["particleptr"]]],[11,"sub","","Similar to `*const T::sub()`, with the same safety caveats.",4,[[["self"],["usize"]],["particleptr"]]],[11,"wrapping_add","","Similar to `*const T::wrapping_add()`.",4,[[["self"],["usize"]],["particleptr"]]],[11,"wrapping_sub","","Similar to `*const T::wrapping_sub()`.",4,[[["self"],["usize"]],["particleptr"]]],[11,"read","","Similar to `*const T::read()`, with the same safety caveats.",4,[[["self"]],["particle"]]],[11,"read_volatile","","Similar to `*const T::read_volatile()`, with the same safety caveats.",4,[[["self"]],["particle"]]],[11,"read_unaligned","","Similar to `*const T::read_unaligned()`, with the same safety caveats.",4,[[["self"]],["particle"]]],[11,"as_ptr","","Convert a `ParticlePtrMut`  to a `ParticlePtr`  ; i.e. do a `*mut T as *const T` transformation",5,[[["self"]],["particleptr"]]],[11,"is_null","","Similar to `*mut T::is_null()`.",5,[[["self"]],["bool"]]],[11,"as_ref","","Similar to `*mut T::as_ref()`, with the same safety caveats.",5,[[["self"]],["option",["particleref"]]]],[11,"as_mut","","Similar to `*mut T::as_mut()`, with the same safety caveats.",5,[[["self"]],["option",["particlerefmut"]]]],[11,"offset","","Similar to `*mut T::offset()`, with the same safety caveats.",5,[[["self"],["isize"]],["particleptrmut"]]],[11,"wrapping_offset","","Similar to `*mut T::wrapping_offset()`",5,[[["self"],["isize"]],["particleptrmut"]]],[11,"add","","Similar to `*mut T::add()`, with the same safety caveats.",5,[[["self"],["usize"]],["particleptrmut"]]],[11,"sub","","Similar to `*mut T::sub()`, with the same safety caveats.",5,[[["self"],["usize"]],["particleptrmut"]]],[11,"wrapping_add","","Similar to `*mut T::wrapping_add()`, with the same safety caveats.",5,[[["self"],["usize"]],["particleptrmut"]]],[11,"wrapping_sub","","Similar to `*mut T::wrapping_sub()`, with the same safety caveats.",5,[[["self"],["usize"]],["particleptrmut"]]],[11,"read","","Similar to `*mut T::read()`, with the same safety caveats.",5,[[["self"]],["particle"]]],[11,"read_volatile","","Similar to `*mut T::read_volatile()`, with the same safety caveats.",5,[[["self"]],["particle"]]],[11,"read_unaligned","","Similar to `*mut T::read_unaligned()`, with the same safety caveats.",5,[[["self"]],["particle"]]],[11,"write","","Similar to `*mut T::write()`, with the same safety caveats.",5,[[["self"],["particle"]]]],[11,"write_volatile","","Similar to `*mut T::write_volatile()`, with the same safety caveats.",5,[[["self"],["particle"]]]],[11,"write_unaligned","","Similar to `*mut T::write_unaligned()`, with the same safety caveats.",5,[[["self"],["particle"]]]],[11,"as_ptr","","Convert a `ParticleRef`  to a `ParticlePtr`  ; i.e. do a `&T as *const T` transformation",2,[[["self"]],["particleptr"]]],[11,"as_ptr","","Convert a `ParticleRefMut`  to a `ParticlePtr`  ; i.e. do a `&mut T as *const T` transformation",3,[[["self"]],["particleptr"]]],[11,"as_mut_ptr","","Convert a `ParticleRefMut`  to a `ParticlePtrMut`  ; i.e. do a `&mut T as *mut T` transformation",3,[[["self"]],["particleptrmut"]]],[11,"len","","Similar to `[Particle] ::len()`,  the length of all fields should be the same.",6,[[["self"]],["usize"]]],[11,"is_empty","","Similar to `[Particle] ::is_empty()`,  the length of all fields should be the same.",6,[[["self"]],["bool"]]],[11,"first","","Similar to `[Particle] ::first()`.",6,[[["self"]],["option",["particleref"]]]],[11,"split_first","","Similar to `[Particle] ::split_first()`.",6,[[["self"]],["option"]]],[11,"last","","Similar to `[Particle] ::last()`.",6,[[["self"]],["option",["particleref"]]]],[11,"split_last","","Similar to `[Particle] ::split_last()`.",6,[[["self"]],["option"]]],[11,"split_at","","Similar to `[Particle] ::split_at()`.",6,N],[11,"get","","Similar to `[Particle] ::get()`.",6,[[["self"],["usize"]],["option",["particleref"]]]],[11,"get_unchecked","","Similar to `[Particle] ::get_unchecked()`.",6,[[["self"],["usize"]],["particleref"]]],[11,"as_ptr","","Similar to `[Particle] ::as_ptr()`.",6,[[["self"]],["particleptr"]]],[11,"from_raw_parts","","Similar to `std::slice::from_raw_parts()`.",6,[[["particleptr"],["usize"]],["particleslice"]]],[11,"as_ref","","Convert a `ParticleSliceMut`  to a `ParticleSlice`  in order to be able to use the methods on the non mutable  version of the slices.",7,[[["self"]],["particleslice"]]],[11,"len","","Similar to `[Particle] ::len()`,  the length of all fields should be the same.",7,[[["self"]],["usize"]]],[11,"is_empty","","Similar to `[Particle] ::is_empty()`,  the length of all fields should be the same.",7,[[["self"]],["bool"]]],[11,"first_mut","","Similar to `[Particle] ::first_mut()`.",7,[[["self"]],["option",["particlerefmut"]]]],[11,"split_first_mut","","Similar to `[Particle] ::split_first_mut()`.",7,[[["self"]],["option"]]],[11,"last_mut","","Similar to `[Particle] ::last_mut()`.",7,[[["self"]],["option",["particlerefmut"]]]],[11,"split_last_mut","","Similar to `[Particle] ::last_mut()`.",7,[[["self"]],["option"]]],[11,"split_at_mut","","Similar to `[Particle] ::split_at_mut()`.",7,N],[11,"swap","","Similar to `[Particle] ::swap()`.",7,[[["self"],["usize"],["usize"]]]],[11,"get","","Similar to `[Particle] ::get()`.",7,[[["self"],["usize"]],["option",["particleref"]]]],[11,"get_unchecked","","Similar to `[Particle] ::get_unchecked()`.",7,[[["self"],["usize"]],["particleref"]]],[11,"get_mut","","Similar to `[Particle] ::get_mut()`.",7,[[["self"],["usize"]],["option",["particlerefmut"]]]],[11,"get_unchecked_mut","","Similar to `[Particle] ::get_unchecked_mut()`.",7,[[["self"],["usize"]],["particlerefmut"]]],[11,"as_ptr","","Similar to `[Particle] ::as_ptr()`.",7,[[["self"]],["particleptr"]]],[11,"as_mut_ptr","","Similar to `[Particle] ::as_mut_ptr()`.",7,[[["self"]],["particleptrmut"]]],[11,"from_raw_parts_mut","","Similar to `std::slice::from_raw_parts_mut()`.",7,[[["particleptrmut"],["usize"]],["particleslicemut"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,N],[11,"into_iter","","",6,[[["self"]],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"into_iter","","",7,[[["self"]],["i"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","","",2,[[["self"]],["particleref"]]],[11,"clone","","",4,[[["self"]],["particleptr"]]],[11,"clone","","",5,[[["self"]],["particleptrmut"]]],[11,"clone","","",6,[[["self"]],["particleslice"]]],[11,"eq","","",0,[[["self"],["particle"]],["bool"]]],[11,"ne","","",0,[[["self"],["particle"]],["bool"]]],[11,"eq","","",1,[[["self"],["particlevec"]],["bool"]]],[11,"ne","","",1,[[["self"],["particlevec"]],["bool"]]],[11,"eq","","",2,[[["self"],["particleref"]],["bool"]]],[11,"ne","","",2,[[["self"],["particleref"]],["bool"]]],[11,"eq","","",3,[[["self"],["particlerefmut"]],["bool"]]],[11,"ne","","",3,[[["self"],["particlerefmut"]],["bool"]]],[11,"eq","","",4,[[["self"],["particleptr"]],["bool"]]],[11,"ne","","",4,[[["self"],["particleptr"]],["bool"]]],[11,"eq","","",5,[[["self"],["particleptrmut"]],["bool"]]],[11,"ne","","",5,[[["self"],["particleptrmut"]],["bool"]]],[11,"eq","","",6,[[["self"],["particleslice"]],["bool"]]],[11,"ne","","",6,[[["self"],["particleslice"]],["bool"]]],[11,"eq","","",7,[[["self"],["particleslicemut"]],["bool"]]],[11,"ne","","",7,[[["self"],["particleslicemut"]],["bool"]]],[11,"into_iter","","",6,N],[11,"into_iter","","",7,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"Particle"],[3,"ParticleVec"],[3,"ParticleRef"],[3,"ParticleRefMut"],[3,"ParticlePtr"],[3,"ParticlePtrMut"],[3,"ParticleSlice"],[3,"ParticleSliceMut"]]};
initSearch(searchIndex);
